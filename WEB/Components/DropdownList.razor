@typeparam T
@using Microsoft.Extensions.Localization;
@using Model.Resources;

<div class="input-group">
    <InputSelect class="@Class" @bind-Value="@BindingValue" disabled="@IsDisabled">
        <option value="0"></option>
        @foreach (T item in ItemsList)
        {
            <option value="@GetValue(item)">@Localizer[GetDisplayText(item)]</option>
        }
    </InputSelect>
</div>

@code {

    private int _value;

    [Parameter]
    public int BindingValue
    {
        get => _value;
        set
        {
            if (_value == value) return;
            _value = value;
            OnSelectedChanged.Invoke(value);
        }
    }

    [Parameter]
    public Action<int> OnSelectedChanged { get; set; }

    [Parameter]
    public List<T> ItemsList { get; set; }

    [Parameter]
    public string DisplayProperty { get; set; }

    [Parameter]
    public string ValueProperty { get; set; }

    [Parameter]
    public bool Small { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    public string Class => Small ? "form-select form-select-sm" : "form-select";

    [Inject]
    public IStringLocalizer<Resources> Localizer { get; set; }

    public string GetDisplayText(T item)
    {
        if (string.IsNullOrEmpty(DisplayProperty))
        {
            return item.ToString();
        }

        var t = item.GetType();
        var prop = t.GetProperty(DisplayProperty);
        return prop.GetValue(item).ToString();
    }

    public object GetValue(T item)
    {
        if (string.IsNullOrEmpty(ValueProperty))
        {
            return item;
        }

        var t = item.GetType();
        var prop = t.GetProperty(ValueProperty);
        return prop.GetValue(item);
    }
}
